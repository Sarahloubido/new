{"ast":null,"code":"import React,{useState}from'react';import FigmaExtractor from'./components/FigmaExtractor';import TextTable from'./components/TextTable';import SpreadsheetManager from'./components/SpreadsheetManager';import Header from'./components/Header';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[extractedData,setExtractedData]=useState([]);const[currentStep,setCurrentStep]=useState('extract');const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const handleDataExtracted=data=>{setExtractedData(data);setCurrentStep('review');setError(null);};const handleUpdateText=async updates=>{setLoading(true);setError(null);try{// This would typically require a Figma file ID and access token\n// For demo purposes, we'll just show the updates\nconsole.log('Text updates to apply:',updates);// Simulate API call\nawait new Promise(resolve=>setTimeout(resolve,1000));alert(`Successfully prepared ${updates.length} text updates. Check console for details.`);setCurrentStep('update');}catch(err){setError('Failed to update text in prototype');console.error('Update error:',err);}finally{setLoading(false);}};const resetApp=()=>{setExtractedData([]);setCurrentStep('extract');setError(null);};return/*#__PURE__*/_jsxs(\"div\",{style:{minHeight:'100vh',backgroundColor:'#f9fafb'},children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(\"main\",{className:\"container\",style:{padding:'2rem 0'},children:[error&&/*#__PURE__*/_jsxs(\"div\",{className:\"alert alert-error\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Error:\"}),\" \",error]}),currentStep==='extract'&&/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'2rem'},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-center mb-6\",children:[/*#__PURE__*/_jsx(\"h2\",{style:{fontSize:'2rem',fontWeight:'bold',marginBottom:'1rem'},children:\"Extract Text from Prototype\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600\",style:{fontSize:'1.125rem',maxWidth:'600px',margin:'0 auto'},children:\"Connect your Figma file to extract all text elements and generate a spreadsheet for editing.\"})]}),/*#__PURE__*/_jsx(FigmaExtractor,{onDataExtracted:handleDataExtracted,loading:loading,setLoading:setLoading,setError:setError})]}),currentStep==='review'&&extractedData.length>0&&/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'2rem'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:'2rem'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{style:{fontSize:'2rem',fontWeight:'bold',marginBottom:'0.5rem'},children:\"Review Extracted Text\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-gray-600\",children:[\"Found \",extractedData.length,\" text elements. Download as spreadsheet or edit inline.\"]})]}),/*#__PURE__*/_jsx(\"button\",{onClick:resetApp,className:\"btn-secondary\",children:\"Start Over\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"two-column\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(SpreadsheetManager,{data:extractedData,onUpdateText:handleUpdateText,loading:loading})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(TextTable,{data:extractedData})})]})]}),currentStep==='update'&&/*#__PURE__*/_jsx(\"div\",{className:\"text-center\",children:/*#__PURE__*/_jsxs(\"div\",{style:{maxWidth:'400px',margin:'0 auto'},children:[/*#__PURE__*/_jsx(\"div\",{className:\"success-icon\",children:\"\\u2713\"}),/*#__PURE__*/_jsx(\"h2\",{style:{fontSize:'1.5rem',fontWeight:'bold',marginBottom:'0.5rem'},children:\"Updates Prepared!\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600 mb-6\",children:\"Your text updates have been prepared. Since direct Figma updates require plugin access, you can use the generated update instructions to apply changes manually.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:resetApp,className:\"btn-primary\",style:{padding:'0.75rem 1.5rem'},children:\"Process Another File\"})]})})]})]});}export default App;","map":{"version":3,"names":["React","useState","FigmaExtractor","TextTable","SpreadsheetManager","Header","jsx","_jsx","jsxs","_jsxs","App","extractedData","setExtractedData","currentStep","setCurrentStep","loading","setLoading","error","setError","handleDataExtracted","data","handleUpdateText","updates","console","log","Promise","resolve","setTimeout","alert","length","err","resetApp","style","minHeight","backgroundColor","children","className","padding","marginBottom","fontSize","fontWeight","maxWidth","margin","onDataExtracted","display","justifyContent","alignItems","onClick","onUpdateText"],"sources":["/workspace/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport FigmaExtractor from './components/FigmaExtractor';\nimport TextTable from './components/TextTable';\nimport SpreadsheetManager from './components/SpreadsheetManager';\nimport Header from './components/Header';\nimport { TextElement } from './types';\nimport './App.css';\n\nfunction App() {\n  const [extractedData, setExtractedData] = useState<TextElement[]>([]);\n  const [currentStep, setCurrentStep] = useState<'extract' | 'review' | 'update'>('extract');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleDataExtracted = (data: TextElement[]) => {\n    setExtractedData(data);\n    setCurrentStep('review');\n    setError(null);\n  };\n\n  const handleUpdateText = async (updates: TextElement[]) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // This would typically require a Figma file ID and access token\n      // For demo purposes, we'll just show the updates\n      console.log('Text updates to apply:', updates);\n      \n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      alert(`Successfully prepared ${updates.length} text updates. Check console for details.`);\n      setCurrentStep('update');\n    } catch (err) {\n      setError('Failed to update text in prototype');\n      console.error('Update error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetApp = () => {\n    setExtractedData([]);\n    setCurrentStep('extract');\n    setError(null);\n  };\n\n  return (\n    <div style={{ minHeight: '100vh', backgroundColor: '#f9fafb' }}>\n      <Header />\n      \n      <main className=\"container\" style={{ padding: '2rem 0' }}>\n        {error && (\n          <div className=\"alert alert-error\">\n            <strong>Error:</strong> {error}\n          </div>\n        )}\n\n        {currentStep === 'extract' && (\n          <div style={{ marginBottom: '2rem' }}>\n            <div className=\"text-center mb-6\">\n              <h2 style={{ fontSize: '2rem', fontWeight: 'bold', marginBottom: '1rem' }}>\n                Extract Text from Prototype\n              </h2>\n              <p className=\"text-gray-600\" style={{ fontSize: '1.125rem', maxWidth: '600px', margin: '0 auto' }}>\n                Connect your Figma file to extract all text elements and generate a spreadsheet for editing.\n              </p>\n            </div>\n            \n            <FigmaExtractor \n              onDataExtracted={handleDataExtracted}\n              loading={loading}\n              setLoading={setLoading}\n              setError={setError}\n            />\n          </div>\n        )}\n\n        {currentStep === 'review' && extractedData.length > 0 && (\n          <div style={{ marginBottom: '2rem' }}>\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '2rem' }}>\n              <div>\n                <h2 style={{ fontSize: '2rem', fontWeight: 'bold', marginBottom: '0.5rem' }}>\n                  Review Extracted Text\n                </h2>\n                <p className=\"text-gray-600\">\n                  Found {extractedData.length} text elements. Download as spreadsheet or edit inline.\n                </p>\n              </div>\n              <button\n                onClick={resetApp}\n                className=\"btn-secondary\"\n              >\n                Start Over\n              </button>\n            </div>\n\n            <div className=\"two-column\">\n              <div>\n                <SpreadsheetManager \n                  data={extractedData}\n                  onUpdateText={handleUpdateText}\n                  loading={loading}\n                />\n              </div>\n              \n              <div>\n                <TextTable data={extractedData} />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {currentStep === 'update' && (\n          <div className=\"text-center\">\n            <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n              <div className=\"success-icon\">\n                âœ“\n              </div>\n              <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '0.5rem' }}>Updates Prepared!</h2>\n              <p className=\"text-gray-600 mb-6\">\n                Your text updates have been prepared. Since direct Figma updates require plugin access, \n                you can use the generated update instructions to apply changes manually.\n              </p>\n              <button\n                onClick={resetApp}\n                className=\"btn-primary\"\n                style={{ padding: '0.75rem 1.5rem' }}\n              >\n                Process Another File\n              </button>\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}